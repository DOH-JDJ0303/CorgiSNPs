/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    // SUBWORKFLOW: PREPARE
    withName: FASTERQDUMP {
        ext.args = '-S'
        publishDir = [
            path: { "${params.outdir}/sample/${meta.id}/reads/" },
            pattern: "*.fastq.gz",
            mode: 'copy'
        ]
    }    
    withName: 'SEQTK_SAMPLE' {
        ext.args = "-s11"
        publishDir = [
            path: { "${params.outdir}/sample/${meta.id}/reads/" },
            pattern: "*.fastq.gz",
            mode: 'copy'
        ]
    }
    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}" },
            pattern: "none",
            mode: 'copy'
        ]
    }
    withName: 'FASTP' {
        ext.args = ""
        publishDir = [
            path: { "${params.outdir}/sample/${meta.id}/reads/" },
            pattern: "*",
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // SUBWORKFLOW: CLASSIFY
    withName: 'SHOVILL' {
        ext.args = "--assembler ${params.assembler} -gsize ${params.genome_size} -depth ${params.shovill_depth} --mincov ${params.min_contig_cov} --minlen ${params.min_contig_len} --nocorr --tmpdir ./tmp"
        publishDir = [
            path: { "${params.outdir}/sample/${meta.id}/class/" },
            pattern: "contigs.fa",
            saveAs: {"${meta.id}.fa"},
            mode: 'copy'
        ]
    }
    withName: 'GAMBIT_QUERY' {
        ext.args = ""
        stageInMode = 'copy'
        publishDir = [
            path: { "${params.outdir}/sample/${meta.id}/class/" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SUBTYPE' {
        container = 'public.ecr.aws/o8h2f0o1/corgisnps:1.0'
        stageInMode = 'copy'
        ext.args = ""
        publishDir = [
            path: { "${params.outdir}/sample/${meta.id}/class/" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // -------------------------------------------------------------------------
    // SUBWORKFLOW: VARIANTS  (runs twice: standalone and inside AMR)
    //   - Standalone VARIANTS:*           -> ${outdir}/variants/<sample>/
    //   - Inside AMR (AMR:VARIANTS:*)     -> ${outdir}/amr_variants/<sample>/
    // -------------------------------------------------------------------------

    // ALIGN_READS
    withName: 'ALIGN_READS' {
        ext.args = ""
        publishDir = [ 
            path: { 
                task.process.contains('AMR') ? 
                    "${params.outdir}/sample/${meta.id}/amr/aln" : 
                    "${params.outdir}/sample/${meta.id}/variants/aln" 
            }, 
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]    
    }

    // SAMTOOLS_MPILEUP
    withName: 'SAMTOOLS_MPILEUP' {
        ext.args = "-aa -d ${params.limit_coverage}"
        publishDir = [ 
            path: { 
                task.process.contains('AMR') ? 
                    "${params.outdir}/sample/${meta.id}/amr/lowsites" : 
                    "${params.outdir}/sample/${meta.id}/variants/lowsites" 
            }, 
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]    
    }

    // LOWSITES
    withName: 'LOWSITES' {
        container = 'public.ecr.aws/o8h2f0o1/corgisnps:1.0'
        ext.args = ""
        publishDir = [ 
            path: { 
                task.process.contains('AMR') ? 
                    "${params.outdir}/sample/${meta.id}/amr/lowsites" : 
                    "${params.outdir}/sample/${meta.id}/variants/lowsites" 
            }, 
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]    
    }

    withName: 'FREEBAYES' {
        ext.args = "--ploidy ${params.ploidy} --limit-coverage ${params.limit_coverage}"
        publishDir = [ 
            path: { 
                task.process.contains('AMR') ? 
                    "${params.outdir}/sample/${meta.id}/amr/vcf" : 
                    "${params.outdir}/sample/${meta.id}/variants/vcf" 
            }, 
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // FILTER_VCF
    withName: 'FILTER_VCF' {
        ext.args = ""
        publishDir = [ 
            path: { 
                task.process.contains('AMR') ? 
                    "${params.outdir}/sample/${meta.id}/amr/vcf" : 
                    "${params.outdir}/sample/${meta.id}/variants/vcf" 
            }, 
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]    
    }

    // CREATE_MASK
    withName: 'CREATE_MASK' {
        container = 'docker.io/staphb/bedtools:2.31.1'
        ext.args = ""
        publishDir = [ 
            path: { 
                task.process.contains('AMR') ? 
                    "${params.outdir}/sample/${meta.id}/amr/vcf" : 
                    "${params.outdir}/sample/${meta.id}/variants/vcf" 
            }, 
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]    
    }

    // BCFTOOLS_CONSENSUS
    withName: 'BCFTOOLS_CONSENSUS' {
        ext.args = "--iupac-codes"
        publishDir = [ 
            path: { 
                task.process.contains('AMR') ? 
                    "${params.outdir}/sample/${meta.id}/amr/consensus" : 
                    "${params.outdir}/sample/${meta.id}/variants/consensus" 
            }, 
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]    
    }

    // SUBWORKFLOW: AMR
    withName: 'PREP_SNPEFF' {
        container = 'public.ecr.aws/o8h2f0o1/corgisnps:1.0'
        stageInMode = 'copy'
        publishDir = [
            path: { "${params.outdir}/" },
            mode: 'copy',
            pattern: 'none'
        ]
    }
    withName: 'COMPARE_REFS' {
        container = 'public.ecr.aws/o8h2f0o1/corgisnps:1.0'
        publishDir = [
            path: { "${params.outdir}/sample/${meta.id}/amr/" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'EXTRACT_REGIONS' {
        container = 'public.ecr.aws/o8h2f0o1/corgisnps:1.0'
        publishDir = [
            path: { "${params.outdir}/sample/${meta.id}/amr/coords" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SNPEFF' {
        ext.args = ''
        stageInMode = 'copy'
        publishDir = [
            path: { "${params.outdir}/sample/${meta.id}/amr/vcf" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }

        ]
    }
    withName: 'SNPEFF_PARSE' {
        container = 'public.ecr.aws/o8h2f0o1/corgisnps:1.0'
        ext.args = ''
        stageInMode = 'copy'
        publishDir = [
            path: { "${params.outdir}/sample/${meta.id}/amr/" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // SUBWORKFLOW: PHYLO
    withName: 'POLYCORE' {
        container = 'public.ecr.aws/o8h2f0o1/polycore:1.0'
        ext.args = "--progressive"
        publishDir = [
            path: { "${params.outdir}/species/${species}/${subtype}/core/" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }

        ]
    }
    withName: 'IQTREE' {
        container = 'public.ecr.aws/o8h2f0o1/iqtree2:2.3.4'
        ext.args  = '-m GTR+I+G'
        publishDir = [
            path: { "${params.outdir}/species/${species}/${subtype}/tree/" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // WORKFLOW: CorgiSNPs
    withName: SUMMARYLINE {
        container = 'public.ecr.aws/o8h2f0o1/corgisnps:1.0'
        publishDir = [
            path: { "${params.outdir}/sample/${meta.id}" },
            mode: 'copy'
        ]
    }
    withName: ADD_AMR {
        container = 'public.ecr.aws/o8h2f0o1/corgisnps:1.0'
        publishDir = [
            path: { "${params.outdir}/sample/${meta.id}" },
            mode: 'copy'
        ]
    }
    withName: REPORT_ALL {
        container = 'public.ecr.aws/o8h2f0o1/corgisnps:1.0'
        publishDir = [
            path: { "${params.outdir}/" },
            mode: 'copy'
        ]
    }    
    withName: REPORT_SPECIES {
        container = 'public.ecr.aws/o8h2f0o1/corgisnps:1.0'
        publishDir = [
            path: { "${params.outdir}/species/${species}/${subtype}" },
            mode: 'copy'
        ]
    }
    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            pattern: 'multiqc_report.html'        
        ]
    }
}
